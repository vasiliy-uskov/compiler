|Program: "int sum ( int a , int b ) { return a + b ; ; } bool boolFunction ( ) { if ( true ) { while ( true ) { return true || false ; } return false && true ; } else { if ( true ) { return true ; } return false ; } return false ; } void calculate ( int a , int b ) { b = a + b ; } main { int a = 4 ; int b = 3 ; calculate ( a , b ) ; b = sum ( a , b ) * 4 + 1 ; b = a < b && true || re ; boolFunction ( ) ; if ( d ) { calculate ( a , b ) ; } if ( ! ( a < b ) && true || isCalculatable ( a , b ) ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } ; if ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } else { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } while ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } }"
| FunctionsList: "int sum ( int a , int b ) { return a + b ; ; } bool boolFunction ( ) { if ( true ) { while ( true ) { return true || false ; } return false && true ; } else { if ( true ) { return true ; } return false ; } return false ; } void calculate ( int a , int b ) { b = a + b ; }"
|  Function: "int sum ( int a , int b ) { return a + b ; ; }"
|   Type: "int"
|    Keyword: "int"
|   Identifier: "sum"
|   DefinitionArgumentsList: "int a , int b"
|    DefinitionArgument: "int a"
|     Type: "int"
|      Keyword: "int"
|     Identifier: "a"
|    DefinitionArgument: "int b"
|     Type: "int"
|      Keyword: "int"
|     Identifier: "b"
|   FunctionOperatorsList: "return a + b ; ;"
|    OperatorReturn: "return a + b"
|     Keyword: "return"
|     Expression: "a + b"
|      Identifier: "a"
|      Keyword: "+"
|      Identifier: "b"
|  Function: "bool boolFunction ( ) { if ( true ) { while ( true ) { return true || false ; } return false && true ; } else { if ( true ) { return true ; } return false ; } return false ; }"
|   Type: "bool"
|    Keyword: "bool"
|   Identifier: "boolFunction"
|   FunctionOperatorsList: "if ( true ) { while ( true ) { return true || false ; } return false && true ; } else { if ( true ) { return true ; } return false ; } return false ;"
|    OperatorIf: "if ( true ) { while ( true ) { return true || false ; } return false && true ; } else { if ( true ) { return true ; } return false ; }"
|     Keyword: "if"
|     Expression: "true"
|      Keyword: "true"
|     FunctionOperatorsList: "while ( true ) { return true || false ; } return false && true ;"
|      OperatorWhile: "while ( true ) { return true || false ; }"
|       Keyword: "while"
|       Expression: "true"
|        Keyword: "true"
|       FunctionOperatorsList: "return true || false ;"
|        OperatorReturn: "return true || false"
|         Keyword: "return"
|         Expression: "true || false"
|          Keyword: "true"
|          Keyword: "||"
|          Keyword: "false"
|      OperatorReturn: "return false && true"
|       Keyword: "return"
|       Expression: "false && true"
|        Expression: "false && true"
|         Keyword: "false"
|         Keyword: "&&"
|         Keyword: "true"
|     Keyword: "else"
|     FunctionOperatorsList: "if ( true ) { return true ; } return false ;"
|      OperatorIf: "if ( true ) { return true ; }"
|       Keyword: "if"
|       Expression: "true"
|        Keyword: "true"
|       FunctionOperatorsList: "return true ;"
|        OperatorReturn: "return true"
|         Keyword: "return"
|         Expression: "true"
|          Keyword: "true"
|      OperatorReturn: "return false"
|       Keyword: "return"
|       Expression: "false"
|        Keyword: "false"
|    OperatorReturn: "return false"
|     Keyword: "return"
|     Expression: "false"
|      Keyword: "false"
|  Function: "void calculate ( int a , int b ) { b = a + b ; }"
|   Keyword: "void"
|   Identifier: "calculate"
|   DefinitionArgumentsList: "int a , int b"
|    DefinitionArgument: "int a"
|     Type: "int"
|      Keyword: "int"
|     Identifier: "a"
|    DefinitionArgument: "int b"
|     Type: "int"
|      Keyword: "int"
|     Identifier: "b"
|   OperatorsList: "b = a + b ;"
|    AssignmentOperator: "b = a + b"
|     Identifier: "b"
|     Keyword: "="
|     Expression: "a + b"
|      Identifier: "a"
|      Keyword: "+"
|      Identifier: "b"
| MainBody: "main { int a = 4 ; int b = 3 ; calculate ( a , b ) ; b = sum ( a , b ) * 4 + 1 ; b = a < b && true || re ; boolFunction ( ) ; if ( d ) { calculate ( a , b ) ; } if ( ! ( a < b ) && true || isCalculatable ( a , b ) ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } ; if ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } else { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } while ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } }"
|  Keyword: "main"
|  OperatorsList: "int a = 4 ; int b = 3 ; calculate ( a , b ) ; b = sum ( a , b ) * 4 + 1 ; b = a < b && true || re ; boolFunction ( ) ; if ( d ) { calculate ( a , b ) ; } if ( ! ( a < b ) && true || isCalculatable ( a , b ) ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } ; if ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } else { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } while ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; }"
|   VariableDefinition: "int a = 4"
|    Type: "int"
|     Keyword: "int"
|    Identifier: "a"
|    Keyword: "="
|    Expression: "4"
|     IntValue: "4"
|   VariableDefinition: "int b = 3"
|    Type: "int"
|     Keyword: "int"
|    Identifier: "b"
|    Keyword: "="
|    Expression: "3"
|     IntValue: "3"
|   FunctionCall: "calculate ( a , b )"
|    Identifier: "calculate"
|    CallArgumentsList: "a , b"
|     Expression: "a"
|      Identifier: "a"
|     Expression: "b"
|      Identifier: "b"
|   AssignmentOperator: "b = sum ( a , b ) * 4 + 1"
|    Identifier: "b"
|    Keyword: "="
|    Expression: "sum ( a , b ) * 4 + 1"
|     Expression: "sum ( a , b ) * 4"
|      FunctionCall: "sum ( a , b )"
|       Identifier: "sum"
|       CallArgumentsList: "a , b"
|        Expression: "a"
|         Identifier: "a"
|        Expression: "b"
|         Identifier: "b"
|      Keyword: "*"
|      IntValue: "4"
|     Keyword: "+"
|     IntValue: "1"
|   AssignmentOperator: "b = a < b && true || re"
|    Identifier: "b"
|    Keyword: "="
|    Expression: "a < b && true || re"
|     Expression: "a < b && true"
|      Expression: "a < b"
|       Identifier: "a"
|       Keyword: "<"
|       Identifier: "b"
|      Keyword: "&&"
|      Keyword: "true"
|     Keyword: "||"
|     Identifier: "re"
|   FunctionCall: "boolFunction ( )"
|    Identifier: "boolFunction"
|   OperatorIf: "if ( d ) { calculate ( a , b ) ; }"
|    Keyword: "if"
|    Expression: "d"
|     Identifier: "d"
|    OperatorsList: "calculate ( a , b ) ;"
|     FunctionCall: "calculate ( a , b )"
|      Identifier: "calculate"
|      CallArgumentsList: "a , b"
|       Expression: "a"
|        Identifier: "a"
|       Expression: "b"
|        Identifier: "b"
|   OperatorIf: "if ( ! ( a < b ) && true || isCalculatable ( a , b ) ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; }"
|    Keyword: "if"
|    Expression: "! ( a < b ) && true || isCalculatable ( a , b )"
|     Expression: "! ( a < b ) && true"
|      Expression: "! ( a < b )"
|       Keyword: "!"
|       Expression: "a < b"
|        Identifier: "a"
|        Keyword: "<"
|        Identifier: "b"
|      Keyword: "&&"
|      Keyword: "true"
|     Keyword: "||"
|     FunctionCall: "isCalculatable ( a , b )"
|      Identifier: "isCalculatable"
|      CallArgumentsList: "a , b"
|       Expression: "a"
|        Identifier: "a"
|       Expression: "b"
|        Identifier: "b"
|    OperatorsList: "calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ;"
|     FunctionCall: "calculate ( a , b )"
|      Identifier: "calculate"
|      CallArgumentsList: "a , b"
|       Expression: "a"
|        Identifier: "a"
|       Expression: "b"
|        Identifier: "b"
|     AssignmentOperator: "b = ( sum ( a , b ) * 4 )"
|      Identifier: "b"
|      Keyword: "="
|      Expression: "( sum ( a , b ) * 4 )"
|       Expression: "sum ( a , b ) * 4"
|        FunctionCall: "sum ( a , b )"
|         Identifier: "sum"
|         CallArgumentsList: "a , b"
|          Expression: "a"
|           Identifier: "a"
|          Expression: "b"
|           Identifier: "b"
|        Keyword: "*"
|        IntValue: "4"
|   OperatorIf: "if ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } else { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; }"
|    Keyword: "if"
|    Expression: "a < b"
|     Expression: "a < b"
|      Identifier: "a"
|      Keyword: "<"
|      Identifier: "b"
|    OperatorsList: "calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ;"
|     FunctionCall: "calculate ( a , b )"
|      Identifier: "calculate"
|      CallArgumentsList: "a , b"
|       Expression: "a"
|        Identifier: "a"
|       Expression: "b"
|        Identifier: "b"
|     AssignmentOperator: "b = ( sum ( a , b ) * 4 )"
|      Identifier: "b"
|      Keyword: "="
|      Expression: "( sum ( a , b ) * 4 )"
|       Expression: "sum ( a , b ) * 4"
|        FunctionCall: "sum ( a , b )"
|         Identifier: "sum"
|         CallArgumentsList: "a , b"
|          Expression: "a"
|           Identifier: "a"
|          Expression: "b"
|           Identifier: "b"
|        Keyword: "*"
|        IntValue: "4"
|    Keyword: "else"
|    OperatorsList: "calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ;"
|     FunctionCall: "calculate ( a , b )"
|      Identifier: "calculate"
|      CallArgumentsList: "a , b"
|       Expression: "a"
|        Identifier: "a"
|       Expression: "b"
|        Identifier: "b"
|     AssignmentOperator: "b = ( sum ( a , b ) * 4 )"
|      Identifier: "b"
|      Keyword: "="
|      Expression: "( sum ( a , b ) * 4 )"
|       Expression: "sum ( a , b ) * 4"
|        FunctionCall: "sum ( a , b )"
|         Identifier: "sum"
|         CallArgumentsList: "a , b"
|          Expression: "a"
|           Identifier: "a"
|          Expression: "b"
|           Identifier: "b"
|        Keyword: "*"
|        IntValue: "4"
|   OperatorWhile: "while ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; }"
|    Keyword: "while"
|    Expression: "a < b"
|     Expression: "a < b"
|      Identifier: "a"
|      Keyword: "<"
|      Identifier: "b"
|    OperatorsList: "calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ;"
|     FunctionCall: "calculate ( a , b )"
|      Identifier: "calculate"
|      CallArgumentsList: "a , b"
|       Expression: "a"
|        Identifier: "a"
|       Expression: "b"
|        Identifier: "b"
|     AssignmentOperator: "b = ( sum ( a , b ) * 4 )"
|      Identifier: "b"
|      Keyword: "="
|      Expression: "( sum ( a , b ) * 4 )"
|       Expression: "sum ( a , b ) * 4"
|        FunctionCall: "sum ( a , b )"
|         Identifier: "sum"
|         CallArgumentsList: "a , b"
|          Expression: "a"
|           Identifier: "a"
|          Expression: "b"
|           Identifier: "b"
|        Keyword: "*"
|        IntValue: "4"
