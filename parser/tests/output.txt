|Program: "int sum ( int a , int b ) { return a + b ; } void calculate ( int a , int b ) { b = a + b ; } main { int a = 4 ; int b = 3 ; calculate ( a , b ) ; b = sum ( a , b ) * 4 ; b = a < b && true || re ; if ( d ) { calculate ( a , b ) ; } if ( ( a < b ) && true || isCalculatable ( a , b ) ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } ; if ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } else { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } while ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } } "
| FunctionsList: "int sum ( int a , int b ) { return a + b ; } void calculate ( int a , int b ) { b = a + b ; } "
|  Function: "int sum ( int a , int b ) { return a + b ; } "
|   Type: "int "
|    Keyword: "int "
|   Identifier: "sum "
|   Breaket: "( "
|   DefinitionArgumentsList: "int a , int b "
|    DefinitionArgumentsList: "int a "
|     Type: "int "
|      Keyword: "int "
|     Identifier: "a "
|    Punctuation: ", "
|    DefinitionArgumentsList: "int b "
|     DefinitionArgumentsList: "int b "
|      Type: "int "
|       Keyword: "int "
|      Identifier: "b "
|   Breaket: ") "
|   Breaket: "{ "
|   FunctionOperatorsList: "return a + b ; "
|    FunctionOperator: "return a + b ; "
|     OperatorReturn: "return a + b "
|      Keyword: "return "
|      Expression: "a + b "
|       Expression: "a "
|        Identifier: "a "
|       Keyword: "+ "
|       Expression: "b "
|        Expression: "b "
|         Identifier: "b "
|     Punctuation: "; "
|   Breaket: "} "
|  FunctionsList: "void calculate ( int a , int b ) { b = a + b ; } "
|   Function: "void calculate ( int a , int b ) { b = a + b ; } "
|    Keyword: "void "
|    Identifier: "calculate "
|    Breaket: "( "
|    DefinitionArgumentsList: "int a , int b "
|     DefinitionArgumentsList: "int a "
|      Type: "int "
|       Keyword: "int "
|      Identifier: "a "
|     Punctuation: ", "
|     DefinitionArgumentsList: "int b "
|      DefinitionArgumentsList: "int b "
|       Type: "int "
|        Keyword: "int "
|       Identifier: "b "
|    Breaket: ") "
|    Breaket: "{ "
|    OperatorsList: "b = a + b ; "
|     Operator: "b = a + b ; "
|      AssignmentOperator: "b = a + b "
|       Identifier: "b "
|       Keyword: "= "
|       Expression: "a + b "
|        Expression: "a "
|         Identifier: "a "
|        Keyword: "+ "
|        Expression: "b "
|         Expression: "b "
|          Identifier: "b "
|      Punctuation: "; "
|    Breaket: "} "
| MainBody: "main { int a = 4 ; int b = 3 ; calculate ( a , b ) ; b = sum ( a , b ) * 4 ; b = a < b && true || re ; if ( d ) { calculate ( a , b ) ; } if ( ( a < b ) && true || isCalculatable ( a , b ) ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } ; if ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } else { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } while ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } } "
|  Keyword: "main "
|  Breaket: "{ "
|  OperatorsList: "int a = 4 ; int b = 3 ; calculate ( a , b ) ; b = sum ( a , b ) * 4 ; b = a < b && true || re ; if ( d ) { calculate ( a , b ) ; } if ( ( a < b ) && true || isCalculatable ( a , b ) ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } ; if ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } else { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } while ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } "
|   Operator: "int a = 4 ; "
|    VariableDefinition: "int a = 4 "
|     Type: "int "
|      Keyword: "int "
|     Identifier: "a "
|     Keyword: "= "
|     Expression: "4 "
|      Expression: "4 "
|       IntValue: "4 "
|    Punctuation: "; "
|   OperatorsList: "int b = 3 ; calculate ( a , b ) ; b = sum ( a , b ) * 4 ; b = a < b && true || re ; if ( d ) { calculate ( a , b ) ; } if ( ( a < b ) && true || isCalculatable ( a , b ) ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } ; if ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } else { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } while ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } "
|    Operator: "int b = 3 ; "
|     VariableDefinition: "int b = 3 "
|      Type: "int "
|       Keyword: "int "
|      Identifier: "b "
|      Keyword: "= "
|      Expression: "3 "
|       Expression: "3 "
|        IntValue: "3 "
|     Punctuation: "; "
|    OperatorsList: "calculate ( a , b ) ; b = sum ( a , b ) * 4 ; b = a < b && true || re ; if ( d ) { calculate ( a , b ) ; } if ( ( a < b ) && true || isCalculatable ( a , b ) ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } ; if ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } else { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } while ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } "
|     Operator: "calculate ( a , b ) ; "
|      AssignmentOperator: "calculate ( a , b ) "
|       Identifier: "calculate "
|       Breaket: "( "
|       CallArgumentsList: "a , b "
|        Expression: "a "
|         Expression: "a "
|          Identifier: "a "
|        Punctuation: ", "
|        CallArgumentsList: "b "
|         Expression: "b "
|          Expression: "b "
|           Identifier: "b "
|       Breaket: ") "
|      Punctuation: "; "
|     OperatorsList: "b = sum ( a , b ) * 4 ; b = a < b && true || re ; if ( d ) { calculate ( a , b ) ; } if ( ( a < b ) && true || isCalculatable ( a , b ) ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } ; if ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } else { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } while ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } "
|      Operator: "b = sum ( a , b ) * 4 ; "
|       AssignmentOperator: "b = sum ( a , b ) * 4 "
|        Identifier: "b "
|        Keyword: "= "
|        Expression: "sum ( a , b ) * 4 "
|         Expression: "sum ( a , b ) "
|          AssignmentOperator: "sum ( a , b ) "
|           Identifier: "sum "
|           Breaket: "( "
|           CallArgumentsList: "a , b "
|            Expression: "a "
|             Expression: "a "
|              Identifier: "a "
|            Punctuation: ", "
|            CallArgumentsList: "b "
|             Expression: "b "
|              Expression: "b "
|               Identifier: "b "
|           Breaket: ") "
|         Keyword: "* "
|         Expression: "4 "
|          Expression: "4 "
|           IntValue: "4 "
|       Punctuation: "; "
|      OperatorsList: "b = a < b && true || re ; if ( d ) { calculate ( a , b ) ; } if ( ( a < b ) && true || isCalculatable ( a , b ) ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } ; if ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } else { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } while ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } "
|       Operator: "b = a < b && true || re ; "
|        AssignmentOperator: "b = a < b && true || re "
|         Identifier: "b "
|         Keyword: "= "
|         Expression: "a < b && true || re "
|          Expression: "a "
|           Identifier: "a "
|          Keyword: "< "
|          Expression: "b && true || re "
|           Expression: "b "
|            Identifier: "b "
|           Keyword: "&& "
|           Expression: "true || re "
|            Expression: "true "
|             Keyword: "true "
|            Keyword: "|| "
|            Expression: "re "
|             Expression: "re "
|              Identifier: "re "
|        Punctuation: "; "
|       OperatorsList: "if ( d ) { calculate ( a , b ) ; } if ( ( a < b ) && true || isCalculatable ( a , b ) ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } ; if ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } else { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } while ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } "
|        Operator: "if ( d ) { calculate ( a , b ) ; } "
|         OperatorIf: "if ( d ) { calculate ( a , b ) ; } "
|          Keyword: "if "
|          Breaket: "( "
|          Expression: "d "
|           Expression: "d "
|            Identifier: "d "
|          Breaket: ") "
|          Breaket: "{ "
|          OperatorsList: "calculate ( a , b ) ; "
|           Operator: "calculate ( a , b ) ; "
|            AssignmentOperator: "calculate ( a , b ) "
|             Identifier: "calculate "
|             Breaket: "( "
|             CallArgumentsList: "a , b "
|              Expression: "a "
|               Expression: "a "
|                Identifier: "a "
|              Punctuation: ", "
|              CallArgumentsList: "b "
|               Expression: "b "
|                Expression: "b "
|                 Identifier: "b "
|             Breaket: ") "
|            Punctuation: "; "
|          Breaket: "} "
|        OperatorsList: "if ( ( a < b ) && true || isCalculatable ( a , b ) ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } ; if ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } else { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } while ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } "
|         Operator: "if ( ( a < b ) && true || isCalculatable ( a , b ) ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } "
|          OperatorIf: "if ( ( a < b ) && true || isCalculatable ( a , b ) ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } "
|           Keyword: "if "
|           Breaket: "( "
|           Expression: "( a < b ) && true || isCalculatable ( a , b ) "
|            Expression: "( a < b ) "
|             Breaket: "( "
|             Expression: "a < b "
|              Expression: "a "
|               Identifier: "a "
|              Keyword: "< "
|              Expression: "b "
|               Expression: "b "
|                Identifier: "b "
|             Breaket: ") "
|            Keyword: "&& "
|            Expression: "true || isCalculatable ( a , b ) "
|             Expression: "true "
|              Keyword: "true "
|             Keyword: "|| "
|             Expression: "isCalculatable ( a , b ) "
|              Expression: "isCalculatable ( a , b ) "
|               AssignmentOperator: "isCalculatable ( a , b ) "
|                Identifier: "isCalculatable "
|                Breaket: "( "
|                CallArgumentsList: "a , b "
|                 Expression: "a "
|                  Expression: "a "
|                   Identifier: "a "
|                 Punctuation: ", "
|                 CallArgumentsList: "b "
|                  Expression: "b "
|                   Expression: "b "
|                    Identifier: "b "
|                Breaket: ") "
|           Breaket: ") "
|           Breaket: "{ "
|           OperatorsList: "calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; "
|            Operator: "calculate ( a , b ) ; "
|             AssignmentOperator: "calculate ( a , b ) "
|              Identifier: "calculate "
|              Breaket: "( "
|              CallArgumentsList: "a , b "
|               Expression: "a "
|                Expression: "a "
|                 Identifier: "a "
|               Punctuation: ", "
|               CallArgumentsList: "b "
|                Expression: "b "
|                 Expression: "b "
|                  Identifier: "b "
|              Breaket: ") "
|             Punctuation: "; "
|            OperatorsList: "b = ( sum ( a , b ) * 4 ) ; "
|             Operator: "b = ( sum ( a , b ) * 4 ) ; "
|              AssignmentOperator: "b = ( sum ( a , b ) * 4 ) "
|               Identifier: "b "
|               Keyword: "= "
|               Expression: "( sum ( a , b ) * 4 ) "
|                Expression: "( sum ( a , b ) * 4 ) "
|                 Breaket: "( "
|                 Expression: "sum ( a , b ) * 4 "
|                  Expression: "sum ( a , b ) "
|                   AssignmentOperator: "sum ( a , b ) "
|                    Identifier: "sum "
|                    Breaket: "( "
|                    CallArgumentsList: "a , b "
|                     Expression: "a "
|                      Expression: "a "
|                       Identifier: "a "
|                     Punctuation: ", "
|                     CallArgumentsList: "b "
|                      Expression: "b "
|                       Expression: "b "
|                        Identifier: "b "
|                    Breaket: ") "
|                  Keyword: "* "
|                  Expression: "4 "
|                   Expression: "4 "
|                    IntValue: "4 "
|                 Breaket: ") "
|              Punctuation: "; "
|           Breaket: "} "
|         OperatorsList: "; if ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } else { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } while ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } "
|          Operator: "; "
|           Punctuation: "; "
|          OperatorsList: "if ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } else { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } while ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } "
|           Operator: "if ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } else { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } "
|            OperatorIf: "if ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } else { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } "
|             Keyword: "if "
|             Breaket: "( "
|             Expression: "a < b "
|              Expression: "a "
|               Identifier: "a "
|              Keyword: "< "
|              Expression: "b "
|               Expression: "b "
|                Identifier: "b "
|             Breaket: ") "
|             Breaket: "{ "
|             OperatorsList: "calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; "
|              Operator: "calculate ( a , b ) ; "
|               AssignmentOperator: "calculate ( a , b ) "
|                Identifier: "calculate "
|                Breaket: "( "
|                CallArgumentsList: "a , b "
|                 Expression: "a "
|                  Expression: "a "
|                   Identifier: "a "
|                 Punctuation: ", "
|                 CallArgumentsList: "b "
|                  Expression: "b "
|                   Expression: "b "
|                    Identifier: "b "
|                Breaket: ") "
|               Punctuation: "; "
|              OperatorsList: "b = ( sum ( a , b ) * 4 ) ; "
|               Operator: "b = ( sum ( a , b ) * 4 ) ; "
|                AssignmentOperator: "b = ( sum ( a , b ) * 4 ) "
|                 Identifier: "b "
|                 Keyword: "= "
|                 Expression: "( sum ( a , b ) * 4 ) "
|                  Expression: "( sum ( a , b ) * 4 ) "
|                   Breaket: "( "
|                   Expression: "sum ( a , b ) * 4 "
|                    Expression: "sum ( a , b ) "
|                     AssignmentOperator: "sum ( a , b ) "
|                      Identifier: "sum "
|                      Breaket: "( "
|                      CallArgumentsList: "a , b "
|                       Expression: "a "
|                        Expression: "a "
|                         Identifier: "a "
|                       Punctuation: ", "
|                       CallArgumentsList: "b "
|                        Expression: "b "
|                         Expression: "b "
|                          Identifier: "b "
|                      Breaket: ") "
|                    Keyword: "* "
|                    Expression: "4 "
|                     Expression: "4 "
|                      IntValue: "4 "
|                   Breaket: ") "
|                Punctuation: "; "
|             Breaket: "} "
|             Keyword: "else "
|             Breaket: "{ "
|             OperatorsList: "calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; "
|              Operator: "calculate ( a , b ) ; "
|               AssignmentOperator: "calculate ( a , b ) "
|                Identifier: "calculate "
|                Breaket: "( "
|                CallArgumentsList: "a , b "
|                 Expression: "a "
|                  Expression: "a "
|                   Identifier: "a "
|                 Punctuation: ", "
|                 CallArgumentsList: "b "
|                  Expression: "b "
|                   Expression: "b "
|                    Identifier: "b "
|                Breaket: ") "
|               Punctuation: "; "
|              OperatorsList: "b = ( sum ( a , b ) * 4 ) ; "
|               Operator: "b = ( sum ( a , b ) * 4 ) ; "
|                AssignmentOperator: "b = ( sum ( a , b ) * 4 ) "
|                 Identifier: "b "
|                 Keyword: "= "
|                 Expression: "( sum ( a , b ) * 4 ) "
|                  Expression: "( sum ( a , b ) * 4 ) "
|                   Breaket: "( "
|                   Expression: "sum ( a , b ) * 4 "
|                    Expression: "sum ( a , b ) "
|                     AssignmentOperator: "sum ( a , b ) "
|                      Identifier: "sum "
|                      Breaket: "( "
|                      CallArgumentsList: "a , b "
|                       Expression: "a "
|                        Expression: "a "
|                         Identifier: "a "
|                       Punctuation: ", "
|                       CallArgumentsList: "b "
|                        Expression: "b "
|                         Expression: "b "
|                          Identifier: "b "
|                      Breaket: ") "
|                    Keyword: "* "
|                    Expression: "4 "
|                     Expression: "4 "
|                      IntValue: "4 "
|                   Breaket: ") "
|                Punctuation: "; "
|             Breaket: "} "
|           OperatorsList: "while ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } "
|            Operator: "while ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } "
|             OperatorWhile: "while ( a < b ) { calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; } "
|              Keyword: "while "
|              Breaket: "( "
|              Expression: "a < b "
|               Expression: "a "
|                Identifier: "a "
|               Keyword: "< "
|               Expression: "b "
|                Expression: "b "
|                 Identifier: "b "
|              Breaket: ") "
|              Breaket: "{ "
|              OperatorsList: "calculate ( a , b ) ; b = ( sum ( a , b ) * 4 ) ; "
|               Operator: "calculate ( a , b ) ; "
|                AssignmentOperator: "calculate ( a , b ) "
|                 Identifier: "calculate "
|                 Breaket: "( "
|                 CallArgumentsList: "a , b "
|                  Expression: "a "
|                   Expression: "a "
|                    Identifier: "a "
|                  Punctuation: ", "
|                  CallArgumentsList: "b "
|                   Expression: "b "
|                    Expression: "b "
|                     Identifier: "b "
|                 Breaket: ") "
|                Punctuation: "; "
|               OperatorsList: "b = ( sum ( a , b ) * 4 ) ; "
|                Operator: "b = ( sum ( a , b ) * 4 ) ; "
|                 AssignmentOperator: "b = ( sum ( a , b ) * 4 ) "
|                  Identifier: "b "
|                  Keyword: "= "
|                  Expression: "( sum ( a , b ) * 4 ) "
|                   Expression: "( sum ( a , b ) * 4 ) "
|                    Breaket: "( "
|                    Expression: "sum ( a , b ) * 4 "
|                     Expression: "sum ( a , b ) "
|                      AssignmentOperator: "sum ( a , b ) "
|                       Identifier: "sum "
|                       Breaket: "( "
|                       CallArgumentsList: "a , b "
|                        Expression: "a "
|                         Expression: "a "
|                          Identifier: "a "
|                        Punctuation: ", "
|                        CallArgumentsList: "b "
|                         Expression: "b "
|                          Expression: "b "
|                           Identifier: "b "
|                       Breaket: ") "
|                     Keyword: "* "
|                     Expression: "4 "
|                      Expression: "4 "
|                       IntValue: "4 "
|                    Breaket: ") "
|                 Punctuation: "; "
|              Breaket: "} "
|  Breaket: "} "
